Index: client/src/App.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Auth from './Components/Auth/Auth'\r\nimport {Route} from 'react-router-dom'\r\nimport {Redirect,Switch} from 'react-router-dom'\r\nimport PersArea from \"./Components/homePage/PersArea\";\r\nimport Report from \"./Components/homePage/Report/Report\";\r\nimport LookMain from \"./Components/homePage/lookReport/lookMain/lookMain\";\r\n\r\nclass  App extends Component{\r\n    state = {\r\n        token:'',\r\n        cabinet:{}\r\n    }\r\n    //обработка кнопки для авторизации\r\n    authHandler = async () =>{\r\n        // let login = document.getElementById(\"input-login\").value\r\n        // let password = document.getElementById(\"input-password\").value\r\n        let formdata = new FormData();\r\n        formdata.append(\"username\", 'admin');\r\n        formdata.append(\"password\", 'admin');\r\n        let requestOptions = {\r\n            method: 'POST',\r\n            body: formdata,\r\n            redirect: 'follow'\r\n        };\r\n        //проверка логина и пароля\r\n        await fetch(\"http://127.0.0.1:8000/token/\", requestOptions)\r\n            .then(response => response.json())\r\n            .then(result =>console.log(this.setState({token:result.access})))\r\n            .catch(error => this.setState({token:''}));\r\n        if(this.state.token ===undefined) {\r\n            alert('incorrect')\r\n        }\r\n        let myHeaders = new Headers();\r\n        myHeaders.append(\"Authorization\",this.state.token);\r\n        let requestOptions1 = {\r\n            method: 'POST',\r\n            headers: myHeaders,\r\n            redirect: 'follow'\r\n        };\r\n        //запрос на получение данных для личного кабинета\r\n        fetch(\"http://127.0.0.1:8000/cabinet/1/\", requestOptions1)\r\n            .then(response =>response.json())\r\n            .then(result => this.setState({cabinet:result[0].fields}))\r\n            .catch(error => console.log('error', error));\r\n    }\r\n    sendReport=()=>{\r\n        const hours = document.getElementById(\"count_hours\").value\r\n        const report = document.getElementById(\"report_text\").value\r\n        const nameProject = document.getElementById(\"name_project_text\").value\r\n        const curator = document.getElementById(\"curator_name\").value\r\n        let myHeaders = new Headers();\r\n        myHeaders.append(\"Authorization\", this.state.token);\r\n        // myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n        let urlencoded = new URLSearchParams();\r\n        urlencoded.append(\"project\", nameProject);\r\n        urlencoded.append(\"text\", report);\r\n        urlencoded.append(\"curator\",curator );\r\n        urlencoded.append(\"hour\", hours);\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: myHeaders,\r\n            body: urlencoded,\r\n            redirect: 'follow'\r\n        };\r\n\r\n        fetch(\"http://127.0.0.1:8000/cabinet/reports/\", requestOptions)\r\n            .then(response => response.text())\r\n            .then(result => console.log(result))\r\n            .catch(error => console.log('error', error));\r\n    }\r\n    render() {\r\n        //  const funcPersArea = () =>{\r\n        //     return < PersArea date = {this.state.cabinet} />;\r\n        // }\r\n        // const funcAuth =()=> {\r\n        //     if (this.state.token !== '') {\r\n        //         return <Redirect to = '/cabinet'/>\r\n        //     }else {\r\n        //         return <Auth authHandler = {this.authHandler} changeLogin = {this.changeLogin}\r\n        //                      changePassword = {this.changePassword}/>;\r\n        //     }\r\n        // };\r\n        // const funcReport= () =>{\r\n        //     return <Report sendReport = {this.sendReport}/>\r\n        // }\r\n        // return (\r\n        //    <div className = 'App' >\r\n        //        <Switch>\r\n        //            <Route path='/' exact component = {funcAuth} />\r\n        //            <Route path='/cabinet' exact component={funcPersArea}/>\r\n        //            {/*<Route path ='/cabinet/report' exact component={funcReport}/>*/}\r\n        //            {/*<Route path='/cabinet/look' exact component={LookMain}/>*/}\r\n        //            <Redirect to = '/cabinet'/>\r\n        //        </Switch>\r\n        //    </div >\r\n        // );\r\n        return(\r\n            <div>\r\n                <button onClick={authHandler}>Войти</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- client/src/App.js	(revision da4ccff326d91a5002508affd30c0cddcbfc1e8a)
+++ client/src/App.js	(date 1591193698265)
@@ -1,11 +1,11 @@
 import React, { Component } from 'react';
 import './App.css';
-import Auth from './Components/Auth/Auth'
-import {Route} from 'react-router-dom'
-import {Redirect,Switch} from 'react-router-dom'
-import PersArea from "./Components/homePage/PersArea";
-import Report from "./Components/homePage/Report/Report";
-import LookMain from "./Components/homePage/lookReport/lookMain/lookMain";
+// import Auth from './Components/Auth/Auth'
+// import {Route} from 'react-router-dom'
+// import {Redirect,Switch} from 'react-router-dom'
+// import PersArea from "./Components/homePage/PersArea";
+// import Report from "./Components/homePage/Report/Report";
+// import LookMain from "./Components/homePage/lookReport/lookMain/lookMain";
 
 class  App extends Component{
     state = {
@@ -14,36 +14,41 @@
     }
     //обработка кнопки для авторизации
     authHandler = async () =>{
+        console.log(document.cookie)
+        await fetch('http://127.0.0.1:8000/yura_petux/',{method:'GET'})
+            .then(response => response.cookie)
+            .then(result => console.log(result))
+        console.log(document.cookie)
         // let login = document.getElementById("input-login").value
         // let password = document.getElementById("input-password").value
-        let formdata = new FormData();
-        formdata.append("username", 'admin');
-        formdata.append("password", 'admin');
-        let requestOptions = {
-            method: 'POST',
-            body: formdata,
-            redirect: 'follow'
-        };
+        // let formdata = new FormData();
+        // formdata.append("username", 'admin');
+        // formdata.append("password", 'admin');
+        // let requestOptions = {
+        //     method: 'POST',
+        //     body: formdata,
+        //     redirect: 'follow'
+        // };
         //проверка логина и пароля
-        await fetch("http://127.0.0.1:8000/token/", requestOptions)
-            .then(response => response.json())
-            .then(result =>console.log(this.setState({token:result.access})))
-            .catch(error => this.setState({token:''}));
-        if(this.state.token ===undefined) {
-            alert('incorrect')
-        }
-        let myHeaders = new Headers();
-        myHeaders.append("Authorization",this.state.token);
-        let requestOptions1 = {
-            method: 'POST',
-            headers: myHeaders,
-            redirect: 'follow'
-        };
+        // await fetch("http://127.0.0.1:8000/token/", requestOptions)
+        //     .then(response => response.json())
+        //     .then(result =>console.log(this.setState({token:result.access})))
+        //     .catch(error => this.setState({token:''}));
+        // if(this.state.token ===undefined) {
+        //     alert('incorrect')
+        // }
+        // let myHeaders = new Headers();
+        // myHeaders.append("Authorization",this.state.token);
+        // let requestOptions1 = {
+        //     method: 'POST',
+        //     headers: myHeaders,
+        //     redirect: 'follow'
+        // };
         //запрос на получение данных для личного кабинета
-        fetch("http://127.0.0.1:8000/cabinet/1/", requestOptions1)
-            .then(response =>response.json())
-            .then(result => this.setState({cabinet:result[0].fields}))
-            .catch(error => console.log('error', error));
+        // fetch("http://127.0.0.1:8000/cabinet/1/", requestOptions1)
+        //     .then(response =>response.json())
+        //     .then(result => this.setState({cabinet:result[0].fields}))
+        //     .catch(error => console.log('error', error));
     }
     sendReport=()=>{
         const hours = document.getElementById("count_hours").value
@@ -99,7 +104,7 @@
         // );
         return(
             <div>
-                <button onClick={authHandler}>Войти</button>
+                <button onClick={this.authHandler}>Войти</button>
             </div>
         )
     }
Index: client/src/Components/homePage/PersArea/PersArea.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react';\r\nimport './PersArea.css'\r\nimport Header from '../Header/Header'\r\nimport Navigation from '../Navigation/Navigation'\r\nimport PersonData from '../PersonData/PersonData'\r\n//import Report from '../Report/report'\r\n\r\n\r\nconst PersArea =(props)=>{\r\n    return(\r\n        <div>\r\n            <Header name={\"Личный кабинет\"}/>\r\n            <div>\r\n                <Navigation/>\r\n            </div>\r\n            \r\n            <div>\r\n                <hr className=\"Header\"/>\r\n            </div>\r\n            <div className=\"container\">\r\n                <PersonData data = {props.date} />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PersArea;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- client/src/Components/homePage/PersArea/PersArea.js	(revision da4ccff326d91a5002508affd30c0cddcbfc1e8a)
+++ client/src/Components/homePage/PersArea/PersArea.js	(date 1591191557653)
@@ -6,23 +6,31 @@
 //import Report from '../Report/report'
 
 
-const PersArea =(props)=>{
-    return(
-        <div>
-            <Header name={"Личный кабинет"}/>
-            <div>
-                <Navigation/>
-            </div>
-            
-            <div>
-                <hr className="Header"/>
-            </div>
-            <div className="container">
-                <PersonData data = {props.date} />
-            </div>
+class PersArea extends React.Component{
+    constructor(props) {
+        super(props);
+        this.state = {
+            token: this.props.token
+        }
+    }
+    render() {
+        return (
+            <div>
+                <Header name={"Личный кабинет"}/>
+                <div>
+                    <Navigation/>
+                </div>
+
+                <div>
+                    <hr className="Header"/>
+                </div>
+                <div className="container">
+                    <PersonData data={props.date}/>
+                </div>
 
-        </div>
-    )
+            </div>
+        )
+    }
 }
 
 export default PersArea;
\ No newline at end of file
Index: server/cabinet/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render, redirect\r\nfrom django.http import HttpResponse\r\nfrom django.views.decorators.csrf import csrf_exempt, ensure_csrf_cookie\r\nfrom .models import Profile, Project, Report\r\nfrom django.contrib.auth.models import User\r\nfrom django.core import serializers\r\nfrom django.contrib.auth import authenticate, login\r\nfrom json import dumps\r\nfrom rest_framework_simplejwt.authentication import JWTAuthentication\r\n\r\n\r\ndef get_user_jwt(request):\r\n    token = request.headers.get('Authorization')\r\n    validated_token = JWTAuthentication().get_validated_token(token)\r\n    user = JWTAuthentication().get_user(validated_token)\r\n    return user\r\n\r\n\r\ndef cabinet_view(request, user_id='default'):\r\n    if user_id == 'default':\r\n            user = get_user_jwt(request)\r\n            if user:\r\n                return redirect(str(user.id) + '/')\r\n            return HttpResponse('Error')\r\n    else:\r\n        user = get_user_JWT(request)\r\n        if user and (user.id == user_id or user.is_staff):\r\n            profile = Profile.objects.filter(user=user)\r\n            data = serializers.serialize('json', profile)\r\n            return HttpResponse(data)\r\n        return HttpResponse(\"Permission denied\")\r\n\r\n\r\ndef all_report_view(request, user_id='default'):\r\n    if user_id == 'default':\r\n        user = get_user_jwt(request)\r\n        if user:\r\n            if request.method == \"GET\":\r\n                reports = Report.objects.filter(creator_id=user.id)\r\n                data = serializers.serialize('json', reports)\r\n                return HttpResponse(data)\r\n            if request.method == \"POST\":\r\n                # name = request.POST['name']\r\n                project = request.POST['project']\r\n                text = request.POST['text']\r\n                curator = request.POST['curator']\r\n                hour = request.POST['hour']\r\n                # project = Project.objects.get(name=project)\r\n                profile = Profile.objects.get(user=user)\r\n                # curator_profile = Profile.objects.get(user=curator)\r\n                if project:\r\n                    new_report = Report.objects.create(project=project, text=text, hour=hour, creator_id=profile,\r\n                                                       curator=curator)\r\n                    new_report.save()\r\n                    return HttpResponse(\"Success\")\r\n                return HttpResponse(\"Something went wrong\")\r\n        return HttpResponse(\"Authentication error\")\r\n    else:\r\n        user = get_user_jwt(request)\r\n        if user:\r\n            if request.method == \"GET\":\r\n                if user_id != user.id and not user.is_staff:\r\n                    return HttpResponse(\"You don't have permissions\")\r\n                reports = Report.objects.filter(creator_id=user_id)\r\n                data = serializers.serialize('json', reports)\r\n                return HttpResponse(data)\r\n            return HttpResponse(\"Method not allowed\")\r\n        return HttpResponse(\"Authentication error\")\r\n\r\n\r\ndef report_view(request, report_id, user_id='default'):\r\n    if user_id == 'default':\r\n        user = get_user_jwt(request)\r\n        if user:\r\n            if request.method == \"GET\":\r\n                report = Report.objects.filter(user=user.id, id=report_id)\r\n                data = serializers.serialize('json', report)\r\n                return HttpResponse(data)\r\n            elif request.method == \"POST\":\r\n                new_report = Report.objects.filter(id=report_id)\r\n                # if 'name' in request.POST:\r\n                # name = request.POST['name']\r\n                # new_report.update(name = name)\r\n                if 'text' in request.POST:\r\n                    text = request.POST['text']\r\n                    new_report.update(text=text)\r\n                if 'hour' in request.POST:\r\n                    hour = request.POST['hour']\r\n                    new_report.update(hour=hour)\r\n                return HttpResponse(\"Success\")\r\n            elif request.method == \"DELETE\":\r\n                report = Report.objects.get(user=user.id, id=report_id)\r\n                report.delete()\r\n                return HttpResponse(\"Success\")\r\n            return HttpResponse(\"Method not allowed\")\r\n        return HttpResponse(\"Authentication error\")\r\n    else:\r\n        user = get_user_jwt(request)\r\n        if user:\r\n            if user_id != user and not user.is_staff:\r\n                return HttpResponse(\"You don't have permissions\")\r\n            if request.method == \"GET\":\r\n                report = Report.objects.filter(user=user_id, id=report_id)\r\n                data = serializers.serialize('json', report)\r\n                return HttpResponse(data)\r\n            return HttpResponse(\"Method not allowed\")\r\n        return HttpResponse(\"Authentication error\")\r\n\r\n\r\ndef all_projects_view(request, user_id='default'):\r\n    if user_id == 'default':\r\n        user = get_user_jwt(request)\r\n        if user:\r\n            if request.method == \"GET\":\r\n                projects = Project.objects.filter(participants=user.id)\r\n                data = serializers.serialize('json', projects)\r\n                return HttpResponse(data)\r\n            if request.method == \"POST\":\r\n                name = request.POST['name']\r\n                tasks = request.POST['tasks']\r\n                participants = request.POST['users'].split()\r\n                participants = [(User.objects.get(username=participant)) for participant in participants]\r\n                profiles = [Profile.objects.get(user=participant) for participant in participants]\r\n                if profiles:\r\n                    new_project = Project.objects.create(name=name, tasks=tasks)\r\n                    new_project.save()\r\n                    [new_project.participants.add(profiles[i].user.id) for i in range(len(profiles))]\r\n                    return HttpResponse(\"Success\")\r\n                return HttpResponse(\"Something went wrong\")\r\n            return HttpResponse(\"Method not allowed\")\r\n        return HttpResponse(\"Authentication error\")\r\n    else:\r\n        user = get_user_jwt(request)\r\n        if user:\r\n            if request.method == \"GET\":\r\n                if user_id != user.id and not user.is_staff:\r\n                    return HttpResponse(\"You don't have permissions\")\r\n                projects = Project.objects.filter(participants=user_id)\r\n                data = serializers.serialize('json', projects)\r\n                return HttpResponse(data)\r\n            return HttpResponse(\"Method not allowed\")\r\n        return HttpResponse(\"Authentication error\")\r\n\r\n\r\ndef project_view(request, project_id, user_id='default'):\r\n    if user_id == 'default':\r\n        user = get_user_jwt(request)\r\n        if user:\r\n            if request.method == \"GET\":\r\n                project = Project.objects.filter(participants=user.id, id=project_id)\r\n                data = serializers.serialize('json', project)\r\n                return HttpResponse(data)\r\n            elif request.method == \"POST\":\r\n                new_project = Project.objects.filter(id=project_id)\r\n                if 'name' in request.POST:\r\n                    name = request.POST['name']\r\n                    new_project.update(name=name)\r\n                if 'tasks' in request.POST:\r\n                    tasks = request.POST['tasks']\r\n                    new_project.update(tasks=tasks)\r\n                if 'status' in request.POST:\r\n                    status = request.POST['status']\r\n                    new_project.update(is_done=status)\r\n                if 'users' in request.POST:\r\n                    participants = request.POST['users'].split()\r\n                    participants = [(User.objects.get(username=participant)) for participant in participants]\r\n                    profiles = [Profile.objects.get(user=participant) for participant in participants]\r\n                    if profiles:\r\n                        [new_project.participants.add(profiles[i].user.id) for i in range(len(profiles))]\r\n                return HttpResponse(\"Success\")\r\n            elif request.method == \"DELETE\":\r\n                project = Project.objects.get(participants=request.user.id, id=project_id)\r\n                project.delete()\r\n                return HttpResponse(\"Success\")\r\n            return HttpResponse(\"Method not allowed\")\r\n        return HttpResponse(\"Authentication error\")\r\n    else:\r\n        user = get_user_jwt(request)\r\n        if user:\r\n            if user_id != user.id and not user.is_staff:\r\n                return HttpResponse(\"You don't have permissions\")\r\n            if request.method == \"GET\":\r\n                project = Project.objects.filter(participants=user_id, id=project_id)\r\n                data = serializers.serialize('json', project)\r\n                return HttpResponse(data)\r\n            return HttpResponse(\"Method not allowed\")\r\n        return HttpResponse(\"Authentication error\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- server/cabinet/views.py	(revision da4ccff326d91a5002508affd30c0cddcbfc1e8a)
+++ server/cabinet/views.py	(date 1591192743727)
@@ -142,6 +142,11 @@
         return HttpResponse("Authentication error")
 
 
+@ensure_csrf_cookie
+def yura_petux(request):
+    return HttpResponse('hi')
+
+
 def project_view(request, project_id, user_id='default'):
     if user_id == 'default':
         user = get_user_jwt(request)
Index: server/cabinet/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.urls import path, include\r\n\r\nfrom . import views\r\n\r\nurlpatterns = [\r\n    path('logout/', views.logout_view),\r\n    path('cabinet/', views.cabinet_view),\r\n    path('cabinet/<int:user_id>/', views.cabinet_view),\r\n\r\n    # reports\r\n    path('cabinet/<int:user_id>/reports/', views.all_report_view),\r\n    path('cabinet/reports/', views.all_report_view),\r\n    path('cabinet/<int:user_id>/report/<int:report_id>', views.report_view),\r\n    path('cabinet/report/<int:report_id>', views.report_view),\r\n    # projects\r\n    path('cabinet/<int:user_id>/projects/', views.all_projects_view),\r\n    path('cabinet/projects/', views.all_projects_view),\r\n    path('cabinet/<int:user_id>/project/<int:project_id>', views.project_view),\r\n    path('cabinet/project/<int:project_id>', views.project_view),\r\n]
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- server/cabinet/urls.py	(revision da4ccff326d91a5002508affd30c0cddcbfc1e8a)
+++ server/cabinet/urls.py	(date 1591192818732)
@@ -3,10 +3,9 @@
 from . import views
 
 urlpatterns = [
-    path('logout/', views.logout_view),
     path('cabinet/', views.cabinet_view),
     path('cabinet/<int:user_id>/', views.cabinet_view),
-
+    path('yura_petux/',views.yura_petux),
     # reports
     path('cabinet/<int:user_id>/reports/', views.all_report_view),
     path('cabinet/reports/', views.all_report_view),
Index: client/src/Components/homePage/PersArea/index.js
===================================================================
--- client/src/Components/homePage/PersArea/index.js	(revision da4ccff326d91a5002508affd30c0cddcbfc1e8a)
+++ client/src/Components/homePage/PersArea/index.js	(revision da4ccff326d91a5002508affd30c0cddcbfc1e8a)
@@ -1,2 +0,0 @@
-import PersArea from "./PersArea";
-export default PersArea;
\ No newline at end of file
